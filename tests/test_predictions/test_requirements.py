"""Testing module for api predictions. This is a test file designed to use
pytest and prepared for some basic assertions and to add your own tests.

You can add new tests using the following structure:
```py
def test_{description for the test}(metadata):
    # Add your assertions inside the test function
    assert {statement_1 that returns true or false}
    assert {statement_2 that returns true or false}
```
The conftest.py module in the same directory includes the fixture to return
to your tests inside the argument variable `metadata` the value generated by
your function defined at `api.get_metadata`.

If your file grows in complexity, you can split it into multiple files in
the same folder. However, remember to add the prefix `test_` to the file.
"""
# pylint: disable=redefined-outer-name
# pylint: disable=unused-argument
from pytest import approx


def test_predictions_type(predictions):
    """Tests that predictions is a list type."""
    assert isinstance(predictions, dict)


def test_predictions_labels(predictions):
    """Tests that predictions has 5 labels."""
    labels = predictions["predictions"]["labels"]
    assert isinstance(labels, list)
    assert len(labels) == 5


def test_predictions_prob(predictions):
    """Tests that predictions has 5 probabilities."""
    prob = predictions["predictions"]["probabilities"]
    assert all(0.0 <= x <= 1.1 for x in prob)


def test_predictions_sum(predictions):
    """Tests that sum of ind predictions totals ~1.0."""
    prob = predictions["predictions"]["probabilities"]
    assert sum(prob) == approx(1.0, abs=1e-3)
